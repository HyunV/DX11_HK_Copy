■ 트랜스폼 관련 
RelativeRotation 처리가 안되어서 
코드 일부 수정.

■ Sphere2D 작업
필요한 자료: 반지름
* 반지름은 Scale의 영향을 받음

* Spehere2D는 타원이 아니라 원이기 때문에
찌그러트리면 안된다.

따라서 스케일은 x y중 큰값을 가지고 해야됨?

- Min Max는 원을 감싸는 사각형을 하나 있다 가정하고 잡아준다.

■ 원 메쉬
360개 가지고 만드는데
시작점을 기준으로 만드므로 배열을 [361]로 했다.

코사인 0도 1
사인 0도 0

마지막360에 다다를때 다시 코사인 사인 0도로



■ 충돌체 타입에 따른 충돌 로직
그냥 원:원은 API로직 갖다 씀, 반지름 끼리 거리를 구해서
두 반지름의 합보다 작으면 충돌 판정

원:사각형, 사각형, 사각형도 갖다 씀

//2교시
씬 로드할때 회전 적용 안되는 오류 잡기(해결)
메테리얼 로드 안되는것도 잡아줬음
릭이 애니메이션 시퀀스쪽에서 발생함

■ OBB 충돌
OBB이론(내적이 사용됨)
렌더링 등에도 많이 활용되는 녀석이라 잘 알고 있어야 한다.

일반적인 사각형 충돌이 가능한 이유: Min Max가 정해져 있기 때문

0920 사진 1 참고
min max가 수평으로 정렬되어있어서
min max의 값만으로 충돌여부를 확인할 수 있다.
이런애들은 AABB Axis Aligned Bounding Box 라고 함

하지만 사각형이 회전중인거면 구하기가 어렵다.
OBB Oriented Bounding Box
 -일반사각형도 OBB라 할 수 있다.


한 축을 기준으로 분리되어 있으면 분리축이다! 라고 명함.
그럼 이제 분리축 후보들을 찾는다.

육면체는 15개 후보가 필요한데

사각형은 4개면 된다.

- OBB 필요한 변수
Center가 필요
x축방향의 절반길이
y축방향의 절반길이


사진
상자 A의 X축, Y축

상자 B의 X축, Y축

n차원을 n-1로 바꾸는게 투영
이를 정사형으로해서 해당 축으로 쭉 내린다.

그래서 중심간의 거리가
정사형으로 내려서 나온 값과 겹치면 ..?

단위벡터 A 와 크기를 모르는 벡터 B의 내적
a*b*Cos0
A는 1이므로 1*b*Cos0

이걸 직각삼각형으로 잡고
cos0 a/c
b는 c

나누면 그냥 a(투영된 단위벡터 A의 크기)가 나옴

이를 이용하여 밑바닥 길이를 구해서 비교하는 알고리즘을 만듦