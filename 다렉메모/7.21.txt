■메시 테스트 도형 만들기

CenterColorMesh[4]
원점이 중심이 되는 사각형

사각형 0 1 3 /  0 3 2

시계방향으로 사각형을 그림
2D는 다 앞면, 뒤로 그리면 화면에 안나옴

컬링(안그린다)

4바이트, 카운트 6개

하나당 4바이트 uint로 쓴다.

■ 쉐이더
HLSL으로 짜야됨

레스터 화 결정
픽셀쉐이더: 최종 색을 결정

★ 투영공간
x -1~1
y -1~1
z  0~1 z가 -값이면 카메라 뒤에있다.

쉐이더는 필터같은 역할(셀카 기능들을 생각해보면 됨)
얘는 빌드가 안되서 텍스트파일로 짬


■HLSL
 - 메모장으로 쓰나 인클루드가 가능하다.
 - 인클루드 공유하기 위해 공용헤더파일 역할인 Share.fx를 만들어서 쓴다.

Bin->Shader
새항목 -> 유틸리티 -> 텍스트파일
.fx


○ sprite.fx 실제 쉐이더용
  정점구조
  쉐이더들인 기본적으로 입력레지스터, 출력레지스터, 상수 레지스터, 임시레지스터 가 존재한다.
  ◎ 입력reg : 출력하는 메쉬의 정점정보가 들어가 있게 된다.
 		   메쉬를 출력할때 정점이 어떤 구조로 만들어진 정점인지 지정한 후 출력을 하게 된다.
  		레지스터는 정해진 레지스터가 있고, 사용자 정의 레지스터가 있다.
		따라서 레지스터는 이름+번호로 만들어지게 되는데
		ex) P,C를 저장하는 버텍스쉐이더가 있고 
              POSITION레지스터는 P0ㅁ C0ㅁ 에 각각 레지스터 에  P,C를 저장해두고
  		버텍스 쉐이더는 이 레지스터에 P0, C0에 접근해서 연산을 함.

  ◎ 출력reg : Shader에서 연산을 마무리 후 결과값을 저장해두기 위한 레지스터.
          VS의 경우 연산된 투영공간에서 위치정보를 넣어준다던지 아니면 다른 셰이더에서 필요로 하는 추가적인
	정보들도 출력 레지스터 넣어두면 뒤의 쉐이더들이 가져가서 사용할 수 이따.

	◎ 상수 reg : c++코드가 가지고 있는 정보를 쉐이더에 넘겨줄 때 사용
	◎ 임시 reg : C++연산처럼 연산할 때 필요한 레지스터

쉐이더 입력을 받고 연산해서 출력을 하고 그 출력 값을 다른 쉐이더가 받아가서 입력을 받고 출력을 함
이게 렌파라의 기본적인 과정임.

컬러 16바이트 

비트필드? 변수를 비트단위로 쪼개서 쓰던 시절 인데 HLSL언어는
시맨틱 :레지스터를 지정한다.

Pos: 레지스터를 지정한다.

○ sv 레지스터: System Value 로 출력 레지스터에서 사용할 수 있다.
시스템 값이므로 절대 건드리면 안된다.


○ PS_OUTPUT_SINGLE
  백버퍼랑 연결되어있는 렌더타겟을  출력한다?
  
○PS_OUTPUT_SINGLE SpriteColorPS
{
	컬러만 가져온다. pos 시스템 밸류 가져오면 ㅈ댐
}


■ 익혀두라(★ 셰이더 파일을 새로 만들 때)
빌드에서 제외 - 예
스프라이트 fx 우클릭 - 속성
HLSL 컴파일러 항목
진입점 이름을 써줘야 컴파일 오류가 안난다. SpriteColorVS 로 짓자
셰이더 형식 (효과로 준다)
셰이더 모델 (5.0버전을 사용할 것)

■ 셰이더 클래스
  레퍼런스 상속

셰이더 종류
  ○컴퓨트 셰이더
  ○출력용 셰이더(그래픽 쉐이더)
     정점이 어떻게 생겼는지 알려줘야한다. (정점 입력 레이아웃 세팅)
     -버텍스 쉐이더
	ID3DBlob 버텍스 쉐이더 코드를 가지고 있어야될 버퍼

	-픽셀 쉐이더
	픽셀쉐이더 코드 가지고 있을 버퍼

	헐 쉐이더

	도메인 쉐이더

	지오메트리 쉐이더

	입력 레이아웃 구조체?
		- 시멘틱 네임 : 버퍼 이름?
 
SetShader 렌파라 들어가기전에 
쉐이더 끼워넣게 됨.




