Axis[] -> 축?

Dot 내적?

Vector4는 컬러용도로 많이 써서
덧셈, 내적 등이 딱히 쓸일이 없다.

알파값: 1이 불투명, 0이 완전투명

ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
■행렬
●XMMATRIX
	__declspec(align(16))
	구조체, 클래스 유니온을 16바이트 기준으로 정렬해서
	STMD연산을 빠르게 해준다.

얘도 오퍼 적어서 만들어서 쓸거다.

다양한 방법으로 접근하기 위해 유니온을 사용

유니온이 메모리 공유해서..썼던걸로 기억

m을 이용해서 4x4행렬 위치에 직접접근


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

행렬의 덧셈은 의미 없으므로 생략

행렬의 곱셈, 행렬의 나눗셈(역행렬)
필요

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

■렌더링 파이프라인
버텍스쉐이더, 픽셀쉐이더가 제일 중요하다.

IA
VS = 버텍스 쉐이더
정점 하나를 공간변환을 해준다.

렌더링 버퍼, 렌더링 파이프라인 둘을 
스트림으로 이어줘서

버퍼 내용 하나하나를 스트림을 통해 렌더링 파이프라인을 통과한다.

좌표0,0,0 기준으로 저장된 정점 정보를
로컬정보라고 한다.

원하는 위치, 원하는크기, 원하는 회전으로
바꿔주는게 월드변환
이걸 행렬로 만들어서 곱해준다.

공간변환(동차좌표공간)
월드(모델)공간(크기, 회전, 위치) -> 뷰공간 -> 투영공간(프로젝션)

★3d 연산은 무조건 같은 공간에서 해줘야 한다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
●크기행렬(scale)
x000
0y00
00z0
0001

●회전행렬(회전원리: 삼각함수 합차공식)(이동행렬..? trans)
1 cos sin 0
0 -sin cos 0
등등..
오일러회전..? ->단점: 짐벌락현상 (회전하면 축이 겹쳐서 동일한 회전을 하게 되는 현상 발생)
이걸 방지하기 위해 4원수라는 복소수개념을 사용

라디안 사용

●위치행렬(이동행렬) (translation)
1000
0100
0010
xyz1

★(암기) 최종 월드행렬 = 크기행렬 * 자전행렬 * 이동행렬 * 공전행렬 * 부모행렬

■//행렬 함수
로테이션 axis: 회전을 위한 기준 축
Translation : 이동행렬
Scailing : 크기행렬
Rotation : 회전행렬

행렬 생성자: m: 항등행렬로 초기화

xm쿼터니온 어쩌고 : 이걸로 회전행렬 만듬

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
//내일은 메쉬매니저 씬매니저 리소스 매니저 만들어서 쓸거
