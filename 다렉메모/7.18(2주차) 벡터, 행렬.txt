다렉이 그려내는 방식

- 선으로 그리는 방식
- 점으로 그리는 방식

- 다각형: 메쉬(버텍스버퍼에 정점을 저장, 위치가 무조건 있어야됨)

- 메쉬로 표현할때 수많은 삼각형으로 물체를 표현한다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
사각형을 그릴때도 삼각형 2개로 그려서 표현

■ 백 페이스 컬링?
   뒷면이 되는 조건이 필요
	시계방향, 반시계방향? 으로 해서
	안보이는 부분은 안그려지게

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
■ 시야각
 시야각을 만들고 시야에 안들어오는 부분은 잘라내여 계산비용을 줄임

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

■ 메시
  필요한 변수: 위치, 색상
   
  XMVector //사람이 쓰기엔 불편하나 굉장히 빠른 다렉 수학라이브러리
   SIMD 레지스터를 이용해 SSE2 연산을 해서 더 빠름
   x y z w 이걸 한번에 계산한다. 4바이트 x 4 16바이트인데 16바이트씩 한번에 처리해서 4바이트 처리하는 마냥 계산함

  학원 프웤은 사람이 쓰기 쉽게 SIMD를 이용하되 더 편하게 쓸 수 있게 작성

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

- 수학라이브러리는 보통 서버에서 만들어두고 갖다 쓴다. 서버는 연산을 굉장히 많이 수행하기 때문?

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

■ 수학 라이브러리
	방향과 크기가 같으면 상등하다고 한다.
   ● 벡터
	x y z
	★ 벡터의 덧셈: 두 벡터 사이의 벡터가 나온다.
	★   벡터의 뺄셈: u, v의 원점의 거리 혹은 v가 u로 가는 벡터
			저 뺄셈을 하고  피타고라스 2번 해서 x y z간의 거리를 구할 수 있다.
	   ● 벡터의 정규화: 단위벡터: 크기가 1인 벡터
		- 만드는 이유? : 방향을 표현하기 위해
	★ 벡터의 내적 : x끼리 곱하고 y끼리 곱하고 z끼리 곱하고 다 더해줌 : 스칼라 값
			 ||A|| * ||B|| * cos0
			A와 B의 단위벡터는 차피 1이므로 cos0만 구하면 된다.
		벡터 내적은 어따 써먹는가?
	★ 벡터의 외적 (크로스) : 외적은 교환법칙이 안된다.
		fps게임에서 정면보고 양 옆 움직일때
		
 		코사인
		1 ~ 0 ~ -1
		0   90  180
	

	○ 다렉 수학 라이브러리
		DirectXMath.h, 
		DirectXPackedVector.h

	XMStoreFloat2 함수: XMVECTOR를  XMFLOAT2로 변환해준다.
	포인터인 애를 저걸로 강제형변환해준다.

	
   
   ● 행렬(매트릭스) 행: 가로 열 세로

   일반적으로 4x4 행렬 쓸거 각각 4바이트씩 총 64비트

   항등행렬 
	1  0 0 0
	0 1 0 0
	0 0 1 0
	0 0 0 1
-행렬의 덧셈은 의미가 없다
	행렬의 곱셈(행렬 곱도 교환법칙 성립 안된다.)
L의 행 x R의 열
L의 열 x L의 행
