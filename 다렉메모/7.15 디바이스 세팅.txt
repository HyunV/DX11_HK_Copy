디바이스를 만든다.

Device.cpp
D3DDriver Type 구조체를 보면
언노운 하드웨어 레퍼런스 등등 종류가 있다.

소프트웨어 타입은 매우 느리다.(글카없이 최적화 할 자신이 있으면 소프트웨어)
하드웨어 타입으로 할 예정
//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

다렉은 기본적으로 텍스트 모듈 지원이 안된다.
디라이트를 써야되는데 얘는 순수 2d출력기반라이브러리다.

//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
D3D Feature LEVEL : dx지원 수준, 어느 버전까지 지원할것이냐?
우리는 11.0버전까지 된걸로 쓴다.

D3DllCreateDevice(0, 드라이버타입, 0, 플래그, 다렉버전, 버전 개수, D3D11_SDK_VERSION(버전),
디바이스, 디바이스 수준레벨 보는 인자, 컨텍스트 이중포인터)

//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
다렉은
hresult 리턴타입이 굉장히 많다.(롱타입)
값에 따라 에러를 표기해두었다.
S_OK -> 성공적
E_FAIL -> 실패함.

hresult 랑 관련된 FAIELD() 매크로가 있다.

8 넘어가는 순간부터는 에러
//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@@클라이언트 쪽 진한 이름으로 해두어야됨
우클릭 -> 시작프로젝트로 설정

//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
#스왑체인 : 페이지 플립핑 하기 위해 사용하는놈, 백버퍼도 들고있다.

DXGI_SWAP_CHAIN_DESC 이라는 구조체가 필요하다.

■ BufferDesc 어떤 옵션으로 백버퍼 만들것이냐(해상도 처리)
//백버퍼 정보 정의
□ SwapDesc 스왑 정의?
	● Format()
	//백버퍼에 어떤 형식으로 정의될것이냐
	제일 많이쓴느건 R8G8B8A8 로 많이씀
	UNORM 언사인드 노말, 부호가 없는 정규화된 놈 RGBA에 8비트씩 0~1 의 선형컬러로 사용
	0~255가 아니다.

	● RefreshRate : 갱신주기 수직동기화와 관련된 내용
		*******
		수직동기화: (VSync?)
 		0,0에서 한줄 한줄 그려내는거
		다 그려내면 갱신했다고 알림을 보냄
		60hz 이면 초당 60번 보냄
		********
	● Scailing 스케일링
 		주로 UNSPECIFIED로 활용됨
		화면 스케일링 일어날 때 덜 깨지게 처리해주는 알고리즘

	● ScanlineOrdering = DXGI_MODE_SCA~~
		글카가 알아서 해준다캄

	● BufferCount : 백버퍼 몇개 쓸거냐? 우리는 하나면 충분

	● BufferUsage : 이 백버퍼를 어떤 용도로 사용할것이냐?

	● OutputWindow = hwnd
	다렉 화면 출력방식은 뷰 포트가 붙어서 얇은 막을 만들어 
	윈도우 클라이언트 를 덮어서 만든다.
	API때는 그냥 윈도우 창에다 그렸음.

	● SampleDesc 멀티샘플링(안티앨리어싱이라고 보면 된다, 느리다.)
	안티앨리어싱 3d게임 물체에 화면 출력할때
	계단현상 일어나는거(앨리어싱 현상) 완화시켜주는거

	Count 카운트: 몇 개 쓸거냐(1개쓸거지만 나중에 알파블렌딩 할 때 늘어날거)
	Quality 퀄리티 0 ~ 15

	얘 제공해주는건 느려서 쉐이더에서 구현해서 쓸거다.

	* 이건 msaa 방식이고 엔비디아에서 fxaa방식을 갖다줌.

	● Windowed = 창모드, 풀스크린
	● SwapEffect = DXGI_SWAP_EFFECT_DISCARD 장치에게 맞겨서 사용한


DXGDevice IDXGIDevice의 정보를 얻어온다.
m_Device->QueryInterface(__uuidof(IDXGIDevice), (void**)&DXGIDevice);
GUID 얻어옴

디바이스 -> 어댑터, 팩토리 순서로 얻어온다.

이 셋을 릴리즈도 해준다.


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
렌더 타겟 뷰, 생성 
깊이버퍼, 스탠실 버퍼 생성(이 둘은 비슷함)

겹쳐져있는 물체를 가리기 위해 깊이버퍼(0~1)이 사용된다.
어레이  사이즈: 1로 고정

■ 깊이버퍼 옵션
	●포맷: 24비트 (3바이트를 쓴다)
	● 바인드 플래그: 스탠실
	● Usage
	  ○ Default : (비디오메모리를 이용할건데 수정할 수 있는 권한이 주어진다.)(배열로 직접접근해서 수정한다.)
	  ○ Immutable(버퍼에 한번 넣어주고 그 이후는 수정할 수 없다. 최적화 할 때 편하다.)
		수정 못하게 락을 거는데, CPU랑 같은 데이터를 계산 하지 않게 하기 위해서
	  ○다이나믹: 동적 접근(일부만 수정할 수 있다. 비디오의 메모리 주소에 접근해서 수정하는 방식)
		(자주 수정이 필요하게 되면 다이나믹으로 쓴다. 그 외에는 쓸 이유가 전혀 없다.)

	  ○ 스테이징(읽기 전용 버퍼, 데이터를 담아놓는 용도로만 씀)(R/W)까지 모두 가능하다.
		(쓸 일 거의 없다.)

	● MipLevel(텍스트때 설명)

//ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
뷰포트: 크기 지정해주는 포트?
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


클리어 렌더 타겟 (원하는 색깔로 백버퍼를 클리어)
(검은색으로 하지마라)

클리어 뎁스 스텐실(깊이, or 스탠실 버퍼 클리어 여부, 혹은 둘 다)


렌더스타트: (렌더타겟 세팅하고 플립핑할 준비?

플립함수에서 플립핑 실행

