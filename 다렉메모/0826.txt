오류수정들

0730부 볼 수 있으면 보기
cdo를 만드는 이유를 설명해줌

씬인포 저장, 게임오브젝트 저장(컴포넌트를 들고 있으니까),

CDO를 만든 이유
엔진 내부 함수들에서 에디터나 혹은 클라에 있는 클래스들을 인클루드해서 생성 할 수 없기때문

3D때는 DDT라는 기능도 나옴



핵심(씬 저장, 불러오기)
우리가 만든 오브젝트들을 씬에서 생성을 못함

에디터가 엔진을 끌어다쓰는거지
엔진이 에디터를 끌어다 쓰는건 아니다.

에디터가 엔진을 끌어다쓰니 엔진 인클루드 하고 라이브러리 링크해서 쓰는거

에디터나 클라 입장에서는 cpp에 구성되있는 
실제 코드를 갖다 쓰는거는 엔진을 빌드해서 나오는 라이브러리 파일을 갖다 쓰는거다.

그러니 씬은 절대 에디터나 클라이언트 쪽의 타입을 알 수 없기 때문에 new CPlayer 이런걸 할 수가없다.

엔진 라이브러리 코드내에서 클래스 타입들을 생성하는 방법이 필요하다.
그 방법중 하나가 원본객체 만들어두는것(CDO방식)
원본객체 만드는 애들은 대표적으로 씬인포, 컴포넌트, 게임오브젝트, 애니메이션

외부에서 엔진의 타입을 상속받아서 객체를 만들어 쓴다는의미는 객체를 복사했다는 의미
원본객체를 만들어놨으니 clone() 함수를 이용하여 자식객체를 생성 가능

씬.cpp 보면
씬InfoCDO로 타입이름 찾아다가 그걸 클론해서 객체처럼 갖다 쓴다.
그리고 데이터만 로드 해서 객체에 채워준다

저장한 순서대로 읽어들인다.

여러 컴포넌트를 들고있는 Player2D는 복사생성자에서 컴포넌트를 이미 만들어놓으니
값들만 넣어주면 되는건가

//게임오브젝트 로드
루트컴포넌트가 아니면 (계층구조라는 의미니까)
컴포넌트들의 값들을 받아오고
루트면 그냥 로드

//씬 컴포넌트 로드쪽도 마찬가지

