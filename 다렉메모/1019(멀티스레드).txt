UI 로딩관련 에러 다시 잡아줌

■ 멀티스레드
#define(전처리기) 이 작동되는 원리
미리 기계어로 바꿔줌

* 전처리기는 언제 시작되는가?
컴파일 하기 전에 동작한다.

#define은 코드->기계어로 번역해줌
★ 중간에 define이 있는 애들은 그걸 전부 코드로 치환한다음
그 상태로 최종 코드로 컴파일이 진행된다.


전처리기 빌드(컴파일) 링크

cpu에서 연산을 담당하는놈
ALU

cpu에서 또 ram말고 캐시메모리 라는게 존재

cpu는 버스로 메모리 데이터를 옮겨오고 덮어쓰는 방식

※ cpu로 비디오 메모리는 앵간하면 접근 ㄴㄴ, 엄청 느림

● 윈도우의 멀티태스크
   프로그램 여러개 켜놓는 것 
   동시같지만 동시가 아님(병렬처리 개념)
   
프로그램 여러개 켜놓는걸 프로세스라 치면
이걸 동시에 작동하는건가?

=반은 맞고 반은 틀림

- 옛날에는 싱글코어라서 하나가 
프로그램 1프로세스, 프로그램 2 프로세스, 프로그램 3 프로세스
이걸 매우 빠르게 조금씩 일해서 반복(이런걸 병렬이라 침)

요즘은 멀티코어라서
쿼드코어라 치고 프로그램이 4개 띄워지면
1, 2, 3, 4, 이렇게 분배를 해주는데
프로그램이 8개면
12, 34, 56, 78 해가지고
결국은 다시 병렬처리가 되는 구조긴 함

■ 사례
게임과, 보안프로그램
보안프로그램에서 게임의 프로세스 정보를 받아갈 수 있음

■스레드
게임을 동작시키는 주체
멀티 프로세서인데 데이터를 공유하고싶은데
프로세스 끼리 데이터 공유하는건 구조상 불가능함.

※ 스레드 끼리는 데이터 공유가 가능함.

운영체제는 스레드를 관리하는 스레드 스케줄러를 가지고 있다.
이걸 통해 스레드 실행순서를 관리하는데 사용자는 절대 건드릴 수 없다.

스레드에서는 메인스레드가 반드시 하나 있다. (winmain)같은 개념

스레드를 나누면 작업을 나눠서 할 수 있으니 효율이 무척 좋다.

★ 하지만 그만큼 문제도 많다
  1. 데이터를 공유할 수 있는문제(좋지만 치명적이다.)
  좋은 스레드는 스레드 간 데이터 공유를 최대한 줄여주는게 좋다.

//2교시
다렉은 멀티스레드 렌더링을 지원하긴 함

멀티스레드로 많이 빼는건 대표적으로 
- 로딩화면
- 길찾기 알고리즘
- 네트워크 프로그래밍은 (얘는 필수)

■ 스레드 전환(컨텍스트 스위칭)
이 스위칭 타이밍은 알 수 없음.

■ 실험
전역번수 Num = 100
스레드 2개 A, B

A는 N++이고
B는 N--인데

중간에 스위칭이 일어나버리면 이상한 값을 받아버림
101결과를 바라는데 99가 나온다던가

이 스위칭이슈를 완화하기 위해
스레드 동기화 기능이 있다.

■스레드 동기화
스레드가 데이터를 공유하니 순서를 정해주기 위해 동기화를 사용한다.

동기화 기법 특징 : 스레드 중에서 전체나 특정 부분을 동기화 처리를 해줄 수 있다.
			게임은 크리티컬 섹션을 많이 쓴다.
			우리 수업은 크리티컬 섹션 -> 이벤트
			게임같이 속도에 민감한게 아니라면 뮤텍스기법

 ● 커널모드: 윈도우 핸들 h인스턴스 h붙은 이런애들을 커널 오브젝트라 함
		커널: 운영체제가 전용으로 사용하는 영역
		(윈도우 창 만들어줘 하면 핸들 정보를 반환해주지만 접근할 수 없다.)
		○ 유저모드에 비해 강력한 기능이 많다, 기능이 좋다.(ex 프로세서 간의 동기화가 가능할 정도)
		○ 유저모드 비해서는 "상대적으로" 느리다. 

  ※ 커널모드의 동기화 기법
	▶뮤텍스
	▶세마포어
	▶이벤트

 ● 유저모드:
  ※ 유저모드의 동기화 기법 
	▶ 크리티컬 섹션?




■락언락
	버퍼 갱신 중 렌더 일어나면 문제가 발생함
	dx기능 중 : 락언락이라는 기능이 있음

: 자신이 해제를 해주어야 접근할 수 있음

스레드 내부에서 락이 걸리면
그걸 쓰는 객체는 잠겨짐

★ 데이터는 그 락 앞에서 멈춤

이 기능을 쓰면 스레드 간 공유를 하면서 나름의 순서를 정해주어
버그를 막아줄 수 있다.

이거 실수로 언락 안하면
혹은 중간에 리턴되서 언락이 작동 안한다면?
= 데드락

※ 데드락이 걸리면 프로그램은 무조건 멈춰버림

////////////////////////설계 및 구현//////////////////////////////////////
스레드는 
서클큐를 만들어서 쓸건데 
데이터가 들어가는부분과 나오는 부분만 락이 있으면 됨
혹은 큐에 메시지 함수도 넣으면 좋음, 운영체제방식처럼


기본적인 스레드 생성 기법으로 쓸 것 (C++에서 제공함)
process.h

스레드를 관리하는 스레드매니저도 제작(엔진쪽에서 관리)

※ 스레드를 생성하는 함수는 어떤 객체에서 쓸 지 알 수 없기 때문에 템플릿으로 작성.

suspend = (바로 작동할 지, 일시정지로 작동할지 여부)

스레드 init
★리턴타입은 언사인드 인트, 인자는 void 포인터 고정, 반드시 필요하다.
스레드 함수는 함수 호출 규약 중 __stdcall을 사용

beginthredaex(
- 첫번째인자-> (안씀) ,
- 스택사이즈-> (0으로 고정), 
- 쓸 함수포인터 (stdcall로 만들어준 스태틱 멤버함수의 주소 넣어줬음),
- arglist(인자로 전달할 리스트 (스레드 자체 객체를 넘겨줄거 this)
- init플래그(바로 작동할 지 일시정지 판단할 서스펜드)
- ? 0
- ? nullptr
 )



//내일은 스레드 하위클래스,
동기화기법 작업예정