코드 재 설명

Engine -> API랑 구조 똑같음
달라진 점: 다이렉트 x는 그려내려면 반드시 디바이스와 디폴트가 필요
그래서 디바이스 클래스를 만들었음

Device -> 여깄는 세팅들은 기본적으로 정해진 것
스왑체인 만들기 위한 과정
{
백버퍼 얻어 렌더타겟 뷰 얻고 깊이버퍼 얻어서 깊이버퍼 뷰를 만듬
뷰포트도 만든다.

렌더타겟 뷰를 생성 이 뷰에다 출력하면 백버퍼에 출력

클리어 렌더 타겟은 중간에 내가 원하는 컬러로 전부 초기화해줌

클리어 뎁스탠실 깊이값 1이면 안보이기 땨ㅐ문에 1로 초기화

렌더스타트 (OM)아웃풋 모듈 (출력 변압기)
렌더타겟과 뎁스뷰를 지정해서 출력한다.

출력 끝나면 플립함수로 백버퍼와 주표면버퍼를 바꿔준다.
}

트랜스폼 노말 이동 적용 안받을때 쓰고
쿠드는 이동적용 받을때 쓴다.


메쉬:: 컨테이너, 슬롯

컨테이너 구조가 복잡해서
슬롯은 컨테이너를 포인터로 해서 단순히 끌어다 쓰기 편하게 만들어놨다.

●컴포넌트
2가지 종류
 ○ 씬 컴포넌트(화면에 배치가 가능한 컴포넌트)
	화면배치를 위해 트랜스폼(위치, 크기 회전정보를 가져 월드공간에서 위치를 표현하기 위한 용도)
	을 갖게된다.

	★ 계층구조로 관리가 된다.
		(따라서 부모의 위치를 따라갈 것인지 말것인지 선택할 수 있다?)
	
	Primitive (출력용)
	스프라이트
	카메라 등등,,

	이 컴포넌트를 이용해 게임오브젝트에 기능을 추가한다.
	따라서 겜오브젝은 루트컴포넌트 하나랑 
	서브 컴포넌트 여럿을 들고있게 한다.

	게임 오브젝트도 계층구조로 만들기 때문에 AddChild 같은 함수도 필요
	
	기능::
	어떤 메쉬를 쓸거고 어떤 쉐이더로 출력할 할거냐 정해줘야됨
	만들어진 트랜스폼 정보를 쉐이더에 전달해주고
	이 쉐이더를 이용해 출력하겠다. 이 메쉬를 출력해라 
	하는 식으로 해서 출력된다.

 ○ 오브젝트 컴포넌트(특정 기능을 추가해주기 위한 컴포넌트)


렌더 매니저: 걍 단순하게 렌더리스트 반복돌려서 출력하게

상수버퍼:: 이건 dx에서 정해진거라서 이틀임.
그래픽 셰이더:: 이것도 마찬가지로 정해져있음


//여기 책 빠삭하게 알고있기
버텍스쉐이더(공간변환) 이부분 이론 빠삭하게 알고 있어야됨
 픽셀쉐이더

뷰공간으로 변환해서 투영공간으로 바꾸는게 편하다. -1~1 0~1
투영공간을 정의한다면
n차원의 공간을 n-1차원으로 바꾸기 위한 과정

